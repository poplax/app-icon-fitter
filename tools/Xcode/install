#!/bin/sh

set -eu

# Check env.
which git >/dev/null 2>&1 || { echo 'Run `xcode-select --install`'; exit -1; }
which gem >/dev/null 2>&1 || { echo 'Install `gem` please.'; exit -1; }

# INSTALL 
PROJECT_PATH='.'
SCRIPT_FILE=$(basename "$0")
TMP_DIR='tmp'
XCODE_PROJECT_EXTENSION='xcodeproj'

ICON_MARK_SCRIPT_DIRNAME='Script'
ICON_MARK_BASE_DIR='tools/Xcode'
ICON_MARK_SCRIPT_PATH="${ICON_MARK_BASE_DIR}/${ICON_MARK_SCRIPT_DIRNAME}"
ICON_MARK_IMAGE="${ICON_MARK_BASE_DIR}/icon_1024.png"
ICON_DIR_EXTENSION='appiconset'

# Global ICON_MARK_BASE_DIR
NEED_CLEAN_RUBY='true'

add_rb_script ()
{
	cp -f "${TMP_DIR}/${ICON_MARK_BASE_DIR}/Gemfile" "${PROJECT_PATH}"
	cp -f "${TMP_DIR}/${ICON_MARK_BASE_DIR}/appicon_mark.rb" "${PROJECT_PATH}"
	cp -f "${TMP_DIR}/${ICON_MARK_BASE_DIR}/proj_config.rb" "${PROJECT_PATH}"

	# copy command maybe failed.
	return 0
}

remove_rb_script ()
{
	[[ -f "${PROJECT_PATH}/Gemfile" ]] && rm -f "${PROJECT_PATH}/Gemfile"
	[[ -f "${PROJECT_PATH}/Gemfile.lock" ]] && rm -f "${PROJECT_PATH}/Gemfile.lock"
	[[ -f "${PROJECT_PATH}/appicon_mark.rb" ]] && rm -f "${PROJECT_PATH}/appicon_mark.rb"
	[[ -f "${PROJECT_PATH}/proj_config.rb" ]] && rm -f "${PROJECT_PATH}/proj_config.rb"

	# test maybe failed.
	return 0
}

check_gem ()
{
	local installed=''
	local gem_name
	gem_name="$1"
	gem_local=$(gem list --no-version|grep "^${gem_name}$")
	[[ -n "${gem_local}" ]] && installed='true'
	echo "${installed}"
}

lookup_artwork_image ()
{
	local artwork_image=''
	local asset_dir
	asset_dir="$1"

	while read -r line
	do
		if [[ -n $(file "${line}"|grep "1024 x 1024") ]]; then
			artwork_image="${line}"
			break
		fi
	done <<< "$(find "${asset_dir}" -type f -name "*.png")"
	echo "${artwork_image}"
}

if [[ "$#" -eq 0 ]]; then 
	# echo "Also can run like:"
	# echo "$ ${SCRIPT_FILE} [PROJECT_PATH] ['noclean']"
	# echo "eg. '${SCRIPT_FILE} /Users/Username/Project/Demo.${XCODE_PROJECT_EXTENSION} noclean'"

	# echo "Clean current directory stuff:"
	# echo "eg. '${SCRIPT_FILE} . clean'"
	echo 
else

	[[ "$#" -gt 0 ]] && { project_tmp="$1"; PROJECT_PATH=${project_tmp%/*}; }

	if [[ "$#" -gt 1 ]]; then
		sec="$2"
		case "${sec}" in 
			'clean')
				# Clean
				PROJECT_PATH='.'
				[[ -d "${TMP_DIR}" ]] && rm -fr "${TMP_DIR}"
				remove_rb_script

				echo "Clean files: "
				echo "- ${TMP_DIR}"
				echo "- ${PROJECT_PATH}/Gemfile"
				echo "- ${PROJECT_PATH}/Gemfile.lock"
				echo "- ${PROJECT_PATH}/appicon_mark.rb"
				echo "- ${PROJECT_PATH}/proj_config.rb"

				exit 0
				;;
			'noclean')
				NEED_CLEAN_RUBY=''
				;;
			*)
				echo "* param2: undefined."
				;;
		esac
	fi
fi

declare -a xcodeproj=()
while read -r line
do
	xcodeproj+=("${line}")
done <<< "$(find ${PROJECT_PATH} -type d -d 1 -name "*.${XCODE_PROJECT_EXTENSION}")"

# echo "xcodeproj = ${xcodeproj}" #First element
# echo "xcodeproj[@] = ${xcodeproj[@]}" #All element

# First '.xcodeproj'
if [[ -z "${xcodeproj}" ]]; then
	echo "Couldn't find any '*.${XCODE_PROJECT_EXTENSION}'."
	echo "NOTE: Please put the '${SCRIPT_FILE}' and '*.${XCODE_PROJECT_EXTENSION}' in the same directory."
	exit -1
fi

# GIT
GIT_ICON_MARK='https://github.com/poplax/app-icon-fitter.git'
[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"
git clone "${GIT_ICON_MARK}" "${TMP_DIR}"

cp -fr "${TMP_DIR}/${ICON_MARK_SCRIPT_PATH}" "${PROJECT_PATH}"

tmp_icon_dirs=($(find "${PROJECT_PATH}" -type d -name "*.${ICON_DIR_EXTENSION}"))
image_dirs=${tmp_icon_dirs:-''}
image_first=${image_dirs[0]}

if [[ -z "${image_first}" ]]; then
	echo "No 'appiconasset' directory exist."
	rm -fr "${TMP_DIR}"
	rm -fr "${PROJECT_PATH}/${ICON_MARK_SCRIPT_DIRNAME}"
	exit -1
fi

artwork_image_first=$(lookup_artwork_image "${image_first}")

echo 
echo "Script and resource configure finished:"

# Demo AppIcon copy.
if [[ -z "${artwork_image_first}" ]]; then
	cp -f "${TMP_DIR}/${ICON_MARK_IMAGE}" "${image_first}/"
	echo "'${ICON_MARK_IMAGE}'' copy to '${image_first}'"
	echo "Remove it if don't need."
else
	echo "ArtWorkImage(size:1024x1024) : ${artwork_image_first}"
fi
echo "---"

# <<<<<<<<<<<
# Ruby Part. 

# Global ICON_MARK_BASE_DIR

default_target_name="$(basename ${xcodeproj%.*})"

# Command line.

add_rb_script
[[ -z "$(check_gem "bundler")" ]] && gem install bundler
# bundle install >/dev/null 2>&1
bundle install

echo "./appicon_mark.rb install --project "${xcodeproj}" --target "${default_target_name}""
./appicon_mark.rb install --project "${xcodeproj}" --target "${default_target_name}"
echo "---"

# Ruby Part End.
# >>>>>>>>>>

# Clean up TMP_DIR
rm -fr "${TMP_DIR}"
[[ -n "${NEED_CLEAN_RUBY}" ]] && remove_rb_script

echo "Clean up."
echo "Install done."
